{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daigy Sarma\\\\Desktop\\\\Project1\\\\authreactapp\\\\src\\\\Pages\\\\Auth\\\\ResetPass.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Grid, TextField, Alert, Box, Button } from '@mui/material';\nimport { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useResetPasswordMutation } from '../../services/authApi';\n\n// const ResetPass = () => {\n\n//   const [resetPassword, { isLoading }] = useResetPasswordMutation()\n\n//   const id = useParams().id\n//   let token  = useParams().token\n//   // const x = useParams()\n\n//   // console.log(`Hi front ${x}`)\n\n//   const [error, setError] = useState({\n//     status: false,\n//     msg: \"\",\n//     type: \"\"\n//   })\n\n//   const navigate = useNavigate()\n\n//   const [showPassword, setShowPassword] = useState(false);\n//   const handlePasswordVisibility = () => {\n//     setShowPassword(!showPassword);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const data = new FormData(e.currentTarget);\n//     const actualData = {\n//       password: data.get('password'),\n//       password_confirmation: data.get('password_confirmation')\n//     };\n\n//     if (actualData.password && actualData.password_confirmation) {\n//       if (actualData.password === actualData.password_confirmation) {\n\n//         const res = await resetPassword({ actualData, id, token })\n//        // console.log(res);\n//         if (res.data.status === \"success\") {\n//           document.getElementById('reset-pass-form').reset();\n//           setError({ status: true, msg: res.data.message, type: 'success' })\n//           setTimeout(() => {\n//             navigate('/LogReg')\n//           }, 3000);\n//         }\n//         if (res.data.status === \"failed\") {\n//           setError({ status: true, msg: res.data.message, type: 'error' })\n//         }\n//       }\n//       else {\n//         setError({ status: true, msg: \" New Password and Confirm New Password doesn't match !\", type: 'error' })\n//       }\n//     } else {\n//       console.log(\"all fields are required\");\n//     }\n//   };\n\n//   return <>\n//     <Grid container justifyContent='center'\n//       item\n//       lg={4}\n//       sm={6}\n//       sx={{\n//         backgroundColor: 'rgba(255, 255, 255, 0.9)',\n//         display: 'flex',\n//         flexDirection: 'column',\n//         alignItems: 'center',\n//         justifyContent: 'center',\n//         padding: 3,\n//         borderRadius: 8,\n//         margin: 'auto' }}>\n//       <Grid item sm={6} xs={10}>\n//         <h1 >Reset Password</h1>\n//         <Box component='form' noVariable sx={{ mt: 1 }} id='reset-pass-form' onSubmit={handleSubmit}>\n//           <TextField margin='normal' required fullWidth id='password' name='password' type='password' label='New Password' />\n//           <TextField margin='normal' required fullWidth id='password_confirmation' name='password_confirmation' type='password' label='Confirm New Password' />\n//           <Box textAlign='center'>\n//             <Button type='submit' variant='contained' sx={{ mt: 3, mb: 2, px: 5 }}> Submit </Button>\n//           </Box>\n//           {error.status ? <Alert severity={error.type}>{error.msg}</Alert> : ''}\n//         </Box>\n//       </Grid>\n//     </Grid>\n//   </>;\n// }\n\n// export default ResetPass;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResetPass = () => {\n  _s();\n  const navigate = useNavigate();\n  const [error, setError] = useState({\n    status: false,\n    msg: \"\",\n    type: \"\"\n  });\n  const [resetPassword, {}] = useResetPasswordMutation();\n  const {\n    id,\n    token\n  } = useParams();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n    const actualData = {\n      password: data.get('password'),\n      password_confirmation: data.get('password_confirmation')\n    };\n    if (actualData.password && actualData.password_confirmation) {\n      if (actualData.password === actualData.password_confirmation) {\n        const res = await resetPassword({\n          actualData,\n          id,\n          token\n        });\n        console.log(res);\n        if (res.data.status === \"success\") {\n          document.getElementById('password-reset-form').reset();\n          setError({\n            status: true,\n            msg: \"Password Reset Successfully. Redirecting to Login Page...\",\n            type: 'success'\n          });\n          setTimeout(() => {\n            navigate(\"/login\");\n          }, 3000);\n        }\n        if (res.data.status === \"failed\") {\n          setError({\n            status: true,\n            msg: res.data.message,\n            type: 'error'\n          });\n        }\n      } else {\n        setError({\n          status: true,\n          msg: \"Password and Confirm Password Doesn't Match\",\n          type: 'error'\n        });\n      }\n    } else {\n      setError({\n        status: true,\n        msg: \"All Fields are Required\",\n        type: 'error'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          sx: {\n            mt: 1\n          },\n          id: \"password-reset-form\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"password\",\n            name: \"password\",\n            label: \"New Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"password_confirmation\",\n            name: \"password_confirmation\",\n            label: \"Confirm New Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              sx: {\n                mt: 3,\n                mb: 2,\n                px: 5\n              },\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }, this), error.status ? /*#__PURE__*/_jsxDEV(Alert, {\n            severity: error.type,\n            children: error.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 27\n          }, this) : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(ResetPass, \"hRUbr+TMpU1AvfHs+S4z4mTM0KE=\", false, function () {\n  return [useNavigate, useResetPasswordMutation, useParams];\n});\n_c = ResetPass;\nexport default ResetPass;\nvar _c;\n$RefreshReg$(_c, \"ResetPass\");","map":{"version":3,"names":["React","Grid","TextField","Alert","Box","Button","useState","useNavigate","useParams","useResetPasswordMutation","jsxDEV","_jsxDEV","Fragment","_Fragment","ResetPass","_s","navigate","error","setError","status","msg","type","resetPassword","id","token","handleSubmit","e","preventDefault","data","FormData","currentTarget","actualData","password","get","password_confirmation","res","console","log","document","getElementById","reset","setTimeout","message","children","container","justifyContent","item","sm","xs","fileName","_jsxFileName","lineNumber","columnNumber","component","noValidate","sx","mt","onSubmit","margin","required","fullWidth","name","label","textAlign","variant","mb","px","severity","_c","$RefreshReg$"],"sources":["C:/Users/Daigy Sarma/Desktop/Project1/authreactapp/src/Pages/Auth/ResetPass.js"],"sourcesContent":["import React from 'react'\r\nimport { Grid, TextField, Alert, Box, Button } from '@mui/material'\r\nimport { useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { useResetPasswordMutation } from '../../services/authApi'\r\n\r\n// const ResetPass = () => {\r\n\r\n//   const [resetPassword, { isLoading }] = useResetPasswordMutation()\r\n\r\n//   const id = useParams().id\r\n//   let token  = useParams().token\r\n//   // const x = useParams()\r\n\r\n//   // console.log(`Hi front ${x}`)\r\n\r\n//   const [error, setError] = useState({\r\n//     status: false,\r\n//     msg: \"\",\r\n//     type: \"\"\r\n//   })\r\n\r\n//   const navigate = useNavigate()\r\n  \r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const handlePasswordVisibility = () => {\r\n//     setShowPassword(!showPassword);\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const data = new FormData(e.currentTarget);\r\n//     const actualData = {\r\n//       password: data.get('password'),\r\n//       password_confirmation: data.get('password_confirmation')\r\n//     };\r\n\r\n//     if (actualData.password && actualData.password_confirmation) {\r\n//       if (actualData.password === actualData.password_confirmation) {\r\n\r\n//         const res = await resetPassword({ actualData, id, token })\r\n//        // console.log(res);\r\n//         if (res.data.status === \"success\") {\r\n//           document.getElementById('reset-pass-form').reset();\r\n//           setError({ status: true, msg: res.data.message, type: 'success' })\r\n//           setTimeout(() => {\r\n//             navigate('/LogReg')\r\n//           }, 3000);\r\n//         }\r\n//         if (res.data.status === \"failed\") {\r\n//           setError({ status: true, msg: res.data.message, type: 'error' })\r\n//         }\r\n//       }\r\n//       else {\r\n//         setError({ status: true, msg: \" New Password and Confirm New Password doesn't match !\", type: 'error' })\r\n//       }\r\n//     } else {\r\n//       console.log(\"all fields are required\");\r\n//     }\r\n//   };\r\n\r\n//   return <>\r\n//     <Grid container justifyContent='center'\r\n//       item\r\n//       lg={4}\r\n//       sm={6}\r\n//       sx={{\r\n//         backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n//         display: 'flex',\r\n//         flexDirection: 'column',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//         padding: 3,\r\n//         borderRadius: 8,\r\n//         margin: 'auto' }}>\r\n//       <Grid item sm={6} xs={10}>\r\n//         <h1 >Reset Password</h1>\r\n//         <Box component='form' noVariable sx={{ mt: 1 }} id='reset-pass-form' onSubmit={handleSubmit}>\r\n//           <TextField margin='normal' required fullWidth id='password' name='password' type='password' label='New Password' />\r\n//           <TextField margin='normal' required fullWidth id='password_confirmation' name='password_confirmation' type='password' label='Confirm New Password' />\r\n//           <Box textAlign='center'>\r\n//             <Button type='submit' variant='contained' sx={{ mt: 3, mb: 2, px: 5 }}> Submit </Button>\r\n//           </Box>\r\n//           {error.status ? <Alert severity={error.type}>{error.msg}</Alert> : ''}\r\n//         </Box>\r\n//       </Grid>\r\n//     </Grid>\r\n//   </>;\r\n// }\r\n\r\n// export default ResetPass;\r\n\r\n\r\nconst ResetPass = () => {\r\n  const navigate = useNavigate()\r\n  const [error, setError] = useState({\r\n    status: false,\r\n    msg: \"\",\r\n    type: \"\"\r\n  })\r\n  const [resetPassword, { }] = useResetPasswordMutation()\r\n  const { id, token } = useParams()\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const data = new FormData(e.currentTarget);\r\n    const actualData = {\r\n      password: data.get('password'),\r\n      password_confirmation: data.get('password_confirmation'),\r\n    }\r\n    if (actualData.password && actualData.password_confirmation) {\r\n      if (actualData.password === actualData.password_confirmation) {\r\n        const res = await resetPassword({ actualData, id, token })\r\n        console.log(res)\r\n        if (res.data.status === \"success\") {\r\n          document.getElementById('password-reset-form').reset()\r\n          setError({ status: true, msg: \"Password Reset Successfully. Redirecting to Login Page...\", type: 'success' })\r\n          setTimeout(() => {\r\n            navigate(\"/login\")\r\n          }, 3000)\r\n        }\r\n        if (res.data.status === \"failed\") {\r\n          setError({ status: true, msg: res.data.message, type: 'error' })\r\n        }\r\n      } else {\r\n        setError({ status: true, msg: \"Password and Confirm Password Doesn't Match\", type: 'error' })\r\n      }\r\n    } else {\r\n      setError({ status: true, msg: \"All Fields are Required\", type: 'error' })\r\n    }\r\n  }\r\n  return <>\r\n    <Grid container justifyContent='center'>\r\n      <Grid item sm={6} xs={12}>\r\n        <h1>Reset Password</h1>\r\n        <Box component='form' noValidate sx={{ mt: 1 }} id='password-reset-form' onSubmit={handleSubmit}>\r\n          <TextField margin='normal' required fullWidth id='password' name='password' label='New Password' type='password' />\r\n          <TextField margin='normal' required fullWidth id='password_confirmation' name='password_confirmation' label='Confirm New Password' type='password' />\r\n          <Box textAlign='center'>\r\n            <Button type='submit' variant='contained' sx={{ mt: 3, mb: 2, px: 5 }}>Save</Button>\r\n          </Box>\r\n          {error.status ? <Alert severity={error.type}>{error.msg}</Alert> : ''}\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  </>;\r\n};\r\n\r\nexport default ResetPass;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}